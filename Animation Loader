-- wzpd was here
local AnimatorModule = {}

local AnimDefaults = {
	["Neck"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["RootJoint"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Shoulder"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Shoulder"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Hip"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Hip"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Head"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Torso"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Arm"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Arm"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Leg"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Leg"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}

local function InterpolatePose(Joint, StartC0, EndC0, Duration, Speed)
	coroutine.wrap(function()
		local RS = game:GetService("RunService")
		local TimePassed = 0
		while TimePassed < Duration and Joint do
			local dt = RS.Heartbeat:Wait()
			TimePassed += dt * Speed
			local Alpha = math.clamp(TimePassed / Duration, 0, 1)
			Joint.C0 = StartC0:Lerp(EndC0, Alpha)
		end
		if Joint then Joint.C0 = EndC0 end
	end)()
end

function AnimatorModule:ResetJoints(Rig)
	local Humanoid = Rig:FindFirstChildOfClass("Humanoid")
	assert(Humanoid and Humanoid.RigType == Enum.HumanoidRigType.R6, "Rig must be R6 Humanoid!")

	local Joints = {
		["Torso"] = Rig.HumanoidRootPart:FindFirstChild("RootJoint") or Rig.HumanoidRootPart:FindFirstChild("Root Joint"),
		["Left Arm"] = Rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = Rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = Rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = Rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = Rig.Torso:FindFirstChild("Neck"),
	}

	for Limb, Joint in pairs(Joints) do
		if Joint and AnimDefaults[Limb] then
			Joint.C0 = AnimDefaults[Limb]
		end
	end
end

function AnimatorModule:LoadAnimation(Rig, KeyframeSequence)
	local Humanoid = Rig:FindFirstChildOfClass("Humanoid")
	assert(Humanoid and Humanoid.RigType == Enum.HumanoidRigType.R6, "Rig must be R6 Humanoid!")

	local Joints = {
		["Torso"] = Rig.HumanoidRootPart:FindFirstChild("RootJoint") or Rig.HumanoidRootPart:FindFirstChild("Root Joint"),
		["Left Arm"] = Rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = Rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = Rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = Rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = Rig.Torso:FindFirstChild("Neck"),
	}

	local Class = {
		Speed = 1,
		KeepLast = 0,
		TimePosition = 0,
		Looped = KeyframeSequence.Loop,
		Stopped = true,
		IsPlaying = false,
		Completed = Instance.new("BindableEvent").Event,
		KeyframeReached = Instance.new("BindableEvent").Event
	}

	local Keyframes = KeyframeSequence:GetKeyframes()
	table.sort(Keyframes, function(a, b) return a.Time < b.Time end)
	Class.Length = Keyframes[#Keyframes].Time

	for _, desc in ipairs(KeyframeSequence:GetDescendants()) do
		if desc:IsA("IntValue") or desc:IsA("StringValue") or desc:IsA("Folder") then
			desc:Destroy()
		elseif desc:IsA("Pose") and not Rig:FindFirstChild(desc.Name, true) then
			desc:Destroy()
		end
	end

	function Class:Play(FadeIn, Speed)
		Class.Speed = math.clamp(Speed or 1, 0.01, 60)
		Class.Stopped = false
		Class.IsPlaying = true
		Class.TimePosition = FadeIn and -FadeIn or 0

		task.spawn(function()
			if FadeIn then task.wait(FadeIn / Class.Speed) end

			repeat
				for i = 1, #Keyframes do
					local k0 = Keyframes[i - 1]
					local k1 = Keyframes[i]
					local k2 = Keyframes[i + 1]

					if Class.Stopped or Humanoid.Health <= 0 then break end

					local waitTime = (k0 and k1.Time - k0.Time) or 0
					if waitTime > 0 then
						local elapsed = 0
						while elapsed < waitTime do
							elapsed += game:GetService("RunService").Heartbeat:Wait() * Class.Speed
							if Class.Stopped or Humanoid.Health <= 0 then return end
						end
					end

					for _, Pose in ipairs(k1:GetDescendants()) do
						local Joint = Joints[Pose.Name]
						if Joint then
							local StartC0 = Joint.C0
							local EndC0 = AnimDefaults[Pose.Name] * Pose.CFrame
							local Duration = (k2 and k2.Time - k1.Time) or 0.5
							InterpolatePose(Joint, StartC0, EndC0, Duration, Class.Speed)
						end
					end

					task.defer(function() Class.KeyframeReached:Fire(k1.Name) end)
					if i == #Keyframes and Class.KeepLast > 0 then
						task.wait(Class.KeepLast / Class.Speed)
					end
				end
				task.defer(function() Class.Completed:Fire() end)
			until not Class.Looped or Class.Stopped or Humanoid.Health <= 0

			Class.IsPlaying = false
		end)
	end

	function Class:Stop()
		Class.Stopped = true
	end

	function Class:AdjustSpeed(Speed)
		Class.Speed = math.clamp(math.abs(Speed or Class.Speed), 0.01, 60)
	end

	return Class
end

return AnimatorModule
