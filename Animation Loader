-- wzpd was here
local AnimatorModule = {}

local AnimDefaults = {
	["Neck"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["RootJoint"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Shoulder"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Shoulder"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Hip"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Hip"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Head"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Torso"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Arm"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Arm"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Leg"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Leg"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}

local function Edit(j, cf, dur, style, dir)
	if j then
		j.C0 = cf
	end
end

function AnimatorModule:ResetJoints(rig)
	local h = rig:FindFirstChildOfClass("Humanoid")
	assert(h and h.RigType == Enum.HumanoidRigType.R6, "Invalid or missing R6 humanoid.")

	local j = {
		["Torso"] = rig.HumanoidRootPart:FindFirstChild("RootJoint") or rig.HumanoidRootPart:FindFirstChild("Root Joint"),
		["Left Arm"] = rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = rig.Torso:FindFirstChild("Neck"),
	}

	for limb, joint in next, j do
		Edit(joint, AnimDefaults[limb])
	end
end

function AnimatorModule:LoadAnimation(rig, seq)
	local h = rig:FindFirstChildOfClass("Humanoid")
	assert(h and h.RigType == Enum.HumanoidRigType.R6, "Invalid or missing R6 humanoid.")

	local j = {
		["Torso"] = rig.HumanoidRootPart:FindFirstChild("RootJoint") or rig.HumanoidRootPart:FindFirstChild("Root Joint"),
		["Left Arm"] = rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = rig.Torso:FindFirstChild("Neck"),
	}

	local class = {
		Speed = 1,
		KeepLast = 0,
		Stopped = true,
		IsPlaying = false,
		TimePosition = 0,
		Looped = seq.Loop,
		Completed = Instance.new("BindableEvent").Event,
		KeyframeReached = Instance.new("BindableEvent").Event,
	}

	local kf = seq:GetKeyframes()
	table.sort(kf, function(a, b) return a.Time < b.Time end)
	class.Length = kf[#kf].Time

	for _, v in ipairs(seq:GetDescendants()) do
		if v:IsA("IntValue") or v:IsA("StringValue") or v:IsA("Folder") then
			v:Destroy()
		elseif v:IsA("Pose") and not rig:FindFirstChild(v.Name, true) then
			v:Destroy()
		end
	end

	local function Yield(sec)
		task.wait(sec / class.Speed)
	end

	function class:Play(fade, spd)
		if spd and spd < 0 then spd = -spd end
		class.Speed = math.clamp(spd or 1, 1, 180)
		class.Stopped = false
		class.IsPlaying = true
		if fade then class.TimePosition = -fade end

		task.spawn(function()
			if fade then Yield(fade) end
			repeat
				for k = 1, #kf do
					local k0, k1, k2 = kf[k - 1], kf[k], kf[k + 1]
					if not class.Stopped and h.Health > 0 then
						if k0 then
							Yield(k1.Time - k0.Time)
						end
						for _, pose in ipairs(k1:GetDescendants()) do
							if j[pose.Name] then
								Edit(j[pose.Name], AnimDefaults[pose.Name] * pose.CFrame)
							end
						end
						class.KeyframeReached:Fire(k1.Name)
						if k == #kf and class.KeepLast > 0 then Yield(class.KeepLast) end
					else
						break
					end
				end
				class.Completed:Fire()
			until not class.Looped or class.Stopped or h.Health <= 0
			class.IsPlaying = false
		end)
	end

	function class:Stop()
		class.Stopped = true
	end

	function class:AdjustSpeed(s)
		if s < 0 then s = -s end
		class.Speed = math.clamp(s or class.Speed, 1, 180)
	end

	return class
end

return AnimatorModule
