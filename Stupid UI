local GazeUI = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local camera = game:GetService("Workspace").CurrentCamera
local cloneref = cloneref or function(o) return o end

local function getScaledSize2(relativeScale)
    local viewportSize = camera.ViewportSize
    local screenSize = math.min(viewportSize.X, viewportSize.Y) -- Base scaling on the smallest screen dimension
    return screenSize * relativeScale
end

-- If you eat a watermelon seed, a watermelon will grow in your stomach. Trust me, bro.
local function Create(class, properties)
    local obj = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        if prop ~= "Parent" and prop ~= "Children" and prop ~= "Events" then
            pcall(function() obj[prop] = value end)
        end
    end
    if properties.Parent then
        obj.Parent = properties.Parent
    end
    if properties.Children then
        for _, child in pairs(properties.Children) do
            child.Parent = obj
        end
    end
    if properties.Events then
        for event, func in pairs(properties.Events) do
            if obj[event] then
                obj[event]:Connect(func)
            end
        end
    end
    return obj
end

-- If you point at a rainbow, your finger will fall off.


local screenGui = Create("ScreenGui", {
    Name = "GazeUIScreen",
    ResetOnSpawn = false,
    Parent = cloneref(game:GetService("CoreGui")),
})

local mainFrame = Create("Frame", {
    Size = UDim2.new(0.5, 0, 0.6, 0),
    Position = UDim2.new(0.5, -200, 0.5, -150),
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BackgroundTransparency = 0.1,
    Draggable = true,
    Active = true,
    Parent = screenGui, 
    Children = {
        Create("UICorner", { CornerRadius = UDim.new(0, 10) }),
        Create("UIStroke", { Thickness = 2, Color = Color3.fromRGB(255, 255, 255) }),
        Create("TextLabel", {
            Size = UDim2.new(1, 0, 0, 40),
            BackgroundTransparency = 1,
            Text = "Gaze UI",
            Font = Enum.Font.GothamBold,
            TextScaled = true,
            TextColor3 = Color3.fromRGB(255, 255, 255)
        })
    }
})

-- I have no idea how planes stay in the air. I think, its actually magic
local tabHolder = Create("ScrollingFrame", {
    Size = UDim2.new(0, 50, 1, -40),
    Position = UDim2.new(0, 0, 0, 40),
    BackgroundTransparency = 1,
    ScrollBarThickness = 0,
    Parent = mainFrame,
    Children = { Create("UIListLayout", { Padding = UDim.new(0, 5) }) }
})

-- If you clap 5 times and spin in a circle, nothing will happen. Try it.
local contentFrame = Create("ScrollingFrame", {
    Size = UDim2.new(1, -60, 1, -50),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    Position = UDim2.new(0, 60, 0, 50),
    BackgroundTransparency = 1,
    ScrollBarThickness = 0,
    Parent = mainFrame,
    Children = { Create("UIListLayout", { Padding = UDim.new(0, 5) }) }
})

-- If you stare at this clown ðŸ¤¡ long enough, you will realize how much time youâ€™ve wasted. 
RunService.RenderStepped:Connect(function()
    contentFrame.CanvasPosition = Vector2.new(0, contentFrame.CanvasPosition.Y)
    tabHolder.CanvasPosition = Vector2.new(0, tabHolder.CanvasPosition.Y)
end)

local tabs, pages, activePage = {}, {}, nil

-- If you type â€˜switchTabâ€™ 3 times fast, you summon a bug.
function GazeUI.switchTab(name)
    local newPage = pages[name]
    if activePage == newPage then return end

    if activePage then activePage.Visible = false end
    newPage.Visible = true
    activePage = newPage
end

-- This is not a tab. This is a lie
function GazeUI.createTab(name)
    local page = Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 5,
        Visible = false,
        Parent = contentFrame,
        Children = { Create("UIListLayout", { Padding = UDim.new(0, 10) }) }
    })

    local tabButton = Create("TextButton", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Text = name:sub(1, 1),
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.GothamBold,
        TextScaled = true,
        Parent = tabHolder,
        Events = { MouseButton1Click = function() GazeUI.switchTab(name) end },
        Children = { Create("UICorner", { CornerRadius = UDim.new(0, 8) }) }
    })

    tabs[name] = tabButton
    pages[name] = page
    return page
end

-- You are now 2% cooler after reading this.
function GazeUI.createButton(parent, text, callback)
    return Create("TextButton", {
        Size = UDim2.new(1, -10, 0, 40),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Text = text,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.Gotham,
        TextScaled = true,
        Parent = parent,
        TextXAlignment = Enum.TextXAlignment.Left,
        Events = { MouseButton1Click = callback or function() print("Clicked:", text) end },
        Children = {
            Create("UICorner", { CornerRadius = UDim.new(0, 8) }),
            Create("ImageLabel", {
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new(1, -25, 0, 5),
                BackgroundTransparency = 0,
                Image = "rbxassetid://17374627544",
            })
        }
    })
end

-- Words on screen. Thatâ€™s it.
function GazeUI.createParagraph(parent, text)
    return Create("TextLabel", {
        Size = UDim2.new(1, -10, 0, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        Text = text,
        TextSize = getScaledSize2(0.05),
        TextColor3 = Color3.new(0.9, 0.9, 0.9),
        Font = Enum.Font.Gotham,
        TextWrapped = true,
        AutomaticSize = Enum.AutomaticSize.Y,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        Parent = parent,
        Children = { Create("UICorner", { CornerRadius = UDim.new(0, 8) }) }
    })
end


function GazeUI.createSlider(parent, min, max, defaultValue, onValueChanged)
    local sliderFill, sliderHandle, sliderLabel, inputBox
    local dragging = false

    local sliderFrame = Create("Frame", {
        Size = UDim2.new(1, -10, 0, 50),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Parent = parent,
        Children = {
            Create("UICorner", { CornerRadius = UDim.new(0, 8) }),

            (function()
                local label = Create("TextLabel", {
                    Size = UDim2.new(0, 60, 1, 0),
                    Position = UDim2.new(0, 5, 0, 0),
                    BackgroundTransparency = 1,
                    Text = tostring(defaultValue),
                    Font = Enum.Font.Gotham,
                    TextScaled = true,
                    TextColor3 = Color3.new(1, 1, 1),
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                sliderLabel = label
                return label
            end)(),

            Create("Frame", {
                Size = UDim2.new(1, -130, 0, 8),
                Position = UDim2.new(0, 70, 0.5, -4),
                BackgroundColor3 = Color3.fromRGB(70, 70, 70),
                Children = {
                    Create("UICorner", { CornerRadius = UDim.new(0, 4) }),

                    (function()
                        local fill = Create("Frame", {
                            Size = UDim2.new((defaultValue - min) / (max - min), 0, 1, 0),
                            BackgroundColor3 = Color3.fromRGB(0, 200, 255),
                            Children = { Create("UICorner", { CornerRadius = UDim.new(0, 4) }) }
                        })
                        sliderFill = fill
                        return fill
                    end)(),

                    (function()
                        local handle = Create("Frame", {
                            Size = UDim2.new(0, 20, 0, 20),
                            Position = UDim2.new(sliderFill.Size.X.Scale, -10, 0.5, -10),
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            Children = { Create("UICorner", { CornerRadius = UDim.new(0, 8) }) }
                        })
                        sliderHandle = handle
                        return handle
                    end)()
                }
            }),

            (function()
                local box = Create("TextBox", {
                    Size = UDim2.new(0, 50, 1, 0),
                    Position = UDim2.new(1, -55, 0, 0),
                    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                    Text = tostring(defaultValue),
                    Font = Enum.Font.Gotham,
                    TextScaled = true,
                    TextColor3 = Color3.new(1, 1, 1),
                    Children = { Create("UICorner", { CornerRadius = UDim.new(0, 4) }) }
                })
                inputBox = box
                return box
            end)()
        }
    })

    local function updateSlider(value)
        local clampedValue = math.clamp(value, min, max)
        local normalizedValue = (clampedValue - min) / (max - min)

        sliderFill.Size = UDim2.new(normalizedValue, 0, 1, 0)
        sliderHandle.Position = UDim2.new(normalizedValue, -10, 0.5, -10)

        sliderLabel.Text = tostring(math.floor(clampedValue))
        inputBox.Text = tostring(math.floor(clampedValue))

        if onValueChanged then
            onValueChanged(math.floor(clampedValue))
        end
    end

    local function onInputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local relativeX = (input.Position.X - sliderFill.Parent.AbsolutePosition.X) / sliderFill.Parent.AbsoluteSize.X
            local newValue = min + (max - min) * math.clamp(relativeX, 0, 1)
            updateSlider(newValue)
        end
    end

    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)

    sliderHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(onInputChanged)

    inputBox.FocusLost:Connect(function()
        local value = tonumber(inputBox.Text)
        if value then
            updateSlider(value)
        else
            inputBox.Text = tostring(defaultValue)
        end
    end)

    return sliderFrame
end

local function updateCanvasSize(scrollFrame, layout)
    scrollFrame.CanvasSize = UDim2.new(0, layout.AbsoluteContentSize.X, 0, layout.AbsoluteContentSize.Y)
end

local function setupAutoResize(scrollFrame, layout)
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        updateCanvasSize(scrollFrame, layout)
    end)

    -- Force an update when UI first loads
    task.spawn(function()
        task.wait()
        updateCanvasSize(scrollFrame, layout)
    end)
end

setupAutoResize(tabHolder, tabHolder:FindFirstChildOfClass("UIListLayout") or tabHolder:WaitForChild("UIListLayout"))


setupAutoResize(contentFrame, contentFrame:FindFirstChildOfClass("UIListLayout") or contentFrame:WaitForChild("UIListLayout"))



-- Congratulations, you made it to the end. You win nothing.
for _, scrollFrame in pairs({tabHolder, contentFrame}) do
    local layout = scrollFrame:FindFirstChildOfClass("UIListLayout") or scrollFrame:WaitForChild("UIListLayout")
    setupAutoResize(scrollFrame, layout)
end 

updateCanvasSize(contentFrame, contentFrame:FindFirstChildOfClass("UIListLayout"))

return GazeUI 
