local AnimatorModule = {}

local AnimDefaults = {
	["Neck"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["RootJoint"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Shoulder"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Shoulder"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Hip"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Hip"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Head"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Torso"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Arm"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Arm"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Leg"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Leg"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}
local R15toR6 = {
	Head = "Head",
	UpperTorso = "Torso",
	LowerTorso = "Torso",
	HumanoidRootPart = "Torso", -- or "RootJoint" if you want full-body movement
	LeftUpperArm = "Left Arm",
	LeftLowerArm = "Left Arm",
	RightUpperArm = "Right Arm",
	RightLowerArm = "Right Arm",
	LeftHand = "Left Arm",
	RightHand = "Right Arm",
	LeftUpperLeg = "Left Leg",
	LeftLowerLeg = "Left Leg",
	RightUpperLeg = "Right Leg",
	RightLowerLeg = "Right Leg",
	LeftFoot = "Left Leg",
	RightFoot = "Right Leg"
}
local function Edit(joint, change)
	if joint then joint.C0 = change end
end

function AnimatorModule:ResetJoints(Rig)
	local Humanoid = Rig:FindFirstChildOfClass("Humanoid")
	if not Humanoid or Humanoid.RigType ~= Enum.HumanoidRigType.R6 then return end

	local torso = Rig:FindFirstChild("Torso")
	local root = Rig:FindFirstChild("HumanoidRootPart")
	if not torso or not root then return end

	local joints = {
		["Torso"] = root:FindFirstChild("RootJoint") or root:FindFirstChild("Root Joint"),
		["Left Arm"] = torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = torso:FindFirstChild("Left Hip"),
		["Right Leg"] = torso:FindFirstChild("Right Hip"),
		["Head"] = torso:FindFirstChild("Neck")
	}

	for part, joint in pairs(joints) do
		Edit(joint, AnimDefaults[part])
	end
end

function AnimatorModule:LoadAnimation(Rig, Sequence)
	local Humanoid = Rig:FindFirstChildOfClass("Humanoid")
	if not Humanoid or Humanoid.RigType ~= Enum.HumanoidRigType.R6 then return end

	local torso = Rig:FindFirstChild("Torso")
	local root = Rig:FindFirstChild("HumanoidRootPart")
	if not torso or not root then return end

	local jointMap = {
		["Torso"] = root:FindFirstChild("RootJoint") or root:FindFirstChild("Root Joint"),
		["Left Arm"] = torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = torso:FindFirstChild("Left Hip"),
		["Right Leg"] = torso:FindFirstChild("Right Hip"),
		["Head"] = torso:FindFirstChild("Neck")
	}

	local validNames = {}
	for _, obj in ipairs(Rig:GetDescendants()) do
		validNames[obj.Name] = true
	end

	for _, obj in ipairs(Sequence:GetDescendants()) do
		if obj:IsA("IntValue") or obj:IsA("StringValue") or obj:IsA("Folder") or (obj:IsA("Pose") and not validNames[obj.Name]) then
			obj:Destroy()
		end
	end

	local Keyframes = Sequence:GetKeyframes()
	table.sort(Keyframes, function(a, b) return a.Time < b.Time end)

	local Class = {}
	Class.Speed = 1
	Class.KeepLast = 0
	Class.Length = Keyframes[#Keyframes].Time
	Class.TimePosition = 0
	Class.Stopped = true
	Class.IsPlaying = false
	Class.Looped = Sequence.Loop
	local Completion = Instance.new("BindableEvent")
	local Reached = Instance.new("BindableEvent")
	Class.Completed = Completion.Event
	Class.KeyframeReached = Reached.Event
	local connection = nil

	function Class:Play(FadeIn, Speed)
		self:Stop()

		Class.Speed = math.clamp(math.abs(Speed or 180), 1, 180)
		Class.Stopped = false
		Class.IsPlaying = true
		Class.TimePosition = -(FadeIn or 0)
		local index = 1
		local keyframeData = {}

		local poseMap = {}

for _, pose in ipairs(kf:GetDescendants()) do
	if pose:IsA("Pose") then
		local r6Name = R15toR6[pose.Name]
		local joint = jointMap[r6Name]
		if r6Name and joint and AnimDefaults[r6Name] then
			local cf = AnimDefaults[r6Name] * pose.CFrame
			if not poseMap[r6Name] then
				poseMap[r6Name] = { Joint = joint, CFrame = cf, Count = 1 }
			else
				-- Blend multiple poses targeting same R6 limb
				local prev = poseMap[r6Name]
				prev.CFrame = prev.CFrame:Lerp(cf, 1 / (prev.Count + 1))
				prev.Count += 1
			end
		end
	end
end

-- Convert to poses array
for _, data in pairs(poseMap) do
	table.insert(poses, { Joint = data.Joint, CFrame = data.CFrame })
end

		local lastTime = os.clock()
		local RunService = game:GetService("RunService")

		connection = RunService.RenderStepped:Connect(function()
			if Class.Stopped or not Class.IsPlaying or Humanoid.Health <= 0 then
				if connection then
					connection:Disconnect()
					connection = nil
				end
				return
			end

			local now = os.clock()
			local delta = now - lastTime
			lastTime = now
			Class.TimePosition += delta * Class.Speed

			while keyframeData[index] and Class.TimePosition >= keyframeData[index].Time do
				for _, p in ipairs(keyframeData[index].Poses) do
					Edit(p.Joint, p.CFrame)
				end
				Reached:Fire(keyframeData[index].Name)
				index += 1
				if index > #keyframeData then
					break
				end
			end

			if index > #keyframeData then
				if Class.Looped then
					Class.TimePosition = 0
					index = 1
				else
					Class.IsPlaying = false
					Class.Stopped = true
					Completion:Fire()
					if connection then
						connection:Disconnect()
						connection = nil
					end
				end
			end
		end)
	end

	function Class:Stop()
		Class.Stopped = true
		Class.IsPlaying = false
		Class.TimePosition = 0
		if connection then
			connection:Disconnect()
			connection = nil
		end
	end

	function Class:AdjustSpeed(Speed)
		Class.Speed = math.clamp(math.abs(Speed or Class.Speed), 1, 180)
	end

	return Class
end

return AnimatorModule
