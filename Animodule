local AnimatorModule = {}

local AnimDefaults = {
	["Neck"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["RootJoint"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Shoulder"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Shoulder"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Hip"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Hip"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Head"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Torso"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Arm"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Arm"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Leg"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Leg"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}

local function Edit(Joint, Change, Duration, Style, Direction)
	Joint.C0 = Change
end

function AnimatorModule:ResetJoints(Rig)
	local RigHumanoid = Rig:FindFirstChildOfClass("Humanoid")
	assert(RigHumanoid and RigHumanoid:IsA("Humanoid"))
	if RigHumanoid.RigType ~= Enum.HumanoidRigType.R6 then
		error("Rig is not R6")
	end
	local Joints = {
		["Torso"] = Rig.HumanoidRootPart:FindFirstChild("RootJoint"),
		["Left Arm"] = Rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = Rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = Rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = Rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = Rig.Torso:FindFirstChild("Neck"),
	}
	for Limb, Joint in pairs(Joints) do
		Edit(Joint, AnimDefaults[Limb], 0.01)
	end
end

function AnimatorModule:LoadAnimation(Rig, KeyframeSequence)
	local RigHumanoid = Rig:FindFirstChildOfClass("Humanoid")
	if not RigHumanoid or RigHumanoid.RigType ~= Enum.HumanoidRigType.R6 then
		error("Invalid rig or non-R6")
	end

	local Joints = {
		["Torso"] = Rig.HumanoidRootPart:FindFirstChild("RootJoint"),
		["Left Arm"] = Rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = Rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = Rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = Rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = Rig.Torso:FindFirstChild("Neck"),
	}

	local Class = {}
	Class.Speed = 1
	Class.Stopped = true
	Class.IsPlaying = false
	Class.TimePosition = 0
	Class.Looped = KeyframeSequence.Loop
	Class.Completed = Instance.new("BindableEvent").Event
	Class.KeyframeReached = Instance.new("BindableEvent").Event

	local Keyframes = KeyframeSequence:GetKeyframes()
	table.sort(Keyframes, function(a, b) return a.Time < b.Time end)

	local RunService = game:GetService("RunService")

	function Class:Play(FadeIn, Speed)
		Class.Speed = math.clamp(Speed or 1, 0.1, 60)
		Class.Stopped = false
		Class.IsPlaying = true
		Class.TimePosition = 0

		local currentIndex = 1
		local lastTime = os.clock()

		RunService:UnbindFromRenderStep("AnimatorUpdate")
		RunService:BindToRenderStep("AnimatorUpdate", Enum.RenderPriority.Character.Value + 1, function()
			if not Class.IsPlaying or Class.Stopped then
				RunService:UnbindFromRenderStep("AnimatorUpdate")
				return
			end

			local now = os.clock()
			local dt = now - lastTime
			lastTime = now

			Class.TimePosition += dt * Class.Speed

			while currentIndex <= #Keyframes and Keyframes[currentIndex].Time <= Class.TimePosition do
				local Keyframe = Keyframes[currentIndex]
				for _, pose in ipairs(Keyframe:GetDescendants()) do
					if pose:IsA("Pose") then
						local joint = Joints[pose.Name]
						if joint then
							local final = AnimDefaults[pose.Name] * pose.CFrame
							Edit(joint, final, 0)
						end
					end
				end
				Class.KeyframeReached:Fire(Keyframes[currentIndex].Name)
				currentIndex += 1
			end

			if currentIndex > #Keyframes then
				if Class.Looped then
					Class.TimePosition = 0
					currentIndex = 1
				else
					Class.IsPlaying = false
					Class.Stopped = true
					RunService:UnbindFromRenderStep("AnimatorUpdate")
					Class.Completed:Fire()
				end
			end
		end)
	end

	function Class:Stop()
		Class.Stopped = true
		Class.IsPlaying = false
		game:GetService("RunService"):UnbindFromRenderStep("AnimatorUpdate")
	end

	function Class:AdjustSpeed(Speed)
		Class.Speed = math.clamp(math.abs(Speed or 1), 0.1, 60)
	end

	return Class
end

return AnimatorModule
