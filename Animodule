local AnimatorModule = {}

local AnimDefaults = {
	["Neck"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["RootJoint"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Shoulder"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Shoulder"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Hip"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Hip"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Head"] = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Torso"] = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
	["Right Arm"] = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Arm"] = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
	["Right Leg"] = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
	["Left Leg"] = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
}

local function Edit(Joint, Change, Duration, Style, Direction)
	Joint.C0 = Change
end

function AnimatorModule:ResetJoints(Rig)
	local RigHumanoid = Rig:FindFirstChildOfClass("Humanoid")
	assert(RigHumanoid and RigHumanoid:IsA("Humanoid"), "Rig must have a Humanoid")
	if RigHumanoid.RigType ~= Enum.HumanoidRigType.R6 then
		error("Only R6 rigs supported")
	end

	local Joints = {
		["Torso"] = Rig.HumanoidRootPart:FindFirstChild("RootJoint"),
		["Left Arm"] = Rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = Rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = Rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = Rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = Rig.Torso:FindFirstChild("Neck"),
	}

	for limb, joint in pairs(Joints) do
		if joint then
			Edit(joint, AnimDefaults[limb], 0.01, Enum.EasingStyle.Linear, Enum.EasingDirection.In)
		end
	end
end

function AnimatorModule:LoadAnimation(Rig, KeyframeSequence)
	local RigHumanoid = Rig:FindFirstChildOfClass("Humanoid")
	assert(RigHumanoid and RigHumanoid.RigType == Enum.HumanoidRigType.R6, "Only R6 rigs supported")

	local Joints = {
		["Torso"] = Rig.HumanoidRootPart:FindFirstChild("RootJoint"),
		["Left Arm"] = Rig.Torso:FindFirstChild("Left Shoulder"),
		["Right Arm"] = Rig.Torso:FindFirstChild("Right Shoulder"),
		["Left Leg"] = Rig.Torso:FindFirstChild("Left Hip"),
		["Right Leg"] = Rig.Torso:FindFirstChild("Right Hip"),
		["Head"] = Rig.Torso:FindFirstChild("Neck"),
	}

	local Class = {}
	Class.Speed = 1
	Class.KeepLast = 0
	Class.Stopped = true
	Class.IsPlaying = false
	Class.TimePosition = 0
	Class.Looped = KeyframeSequence.Loop
	Class.Completed = Instance.new("BindableEvent").Event
	Class.KeyframeReached = Instance.new("BindableEvent").Event

	local RawKeyframes = KeyframeSequence:GetKeyframes()
	table.sort(RawKeyframes, function(a, b) return a.Time < b.Time end)
	Class.Length = RawKeyframes[#RawKeyframes].Time

	local CompiledKeyframes = {}

	for _, Keyframe in ipairs(RawKeyframes) do
		local Entry = {
			Time = Keyframe.Time,
			Name = Keyframe.Name,
			Poses = {}
		}
		for _, Pose in ipairs(Keyframe:GetChildren()) do
			if Pose:IsA("Pose") and AnimDefaults[Pose.Name] then
				Entry.Poses[Pose.Name] = {
					CFrame = Pose.CFrame,
					EasingStyle = Pose.EasingStyle,
					EasingDirection = Pose.EasingDirection
				}
			end
		end
		table.insert(CompiledKeyframes, Entry)
	end

	function Class:Play(FadeIn, Speed)
		Class.Speed = math.clamp(Speed or 1, 0.1, 60)
		Class.Stopped = false
		Class.IsPlaying = true
		Class.TimePosition = 0

		task.spawn(function()
			if FadeIn then
				task.wait(FadeIn / Class.Speed)
			end

			repeat
				for i = 1, #CompiledKeyframes do
					local Current = CompiledKeyframes[i]
					local Next = CompiledKeyframes[i + 1]
					local WaitTime = (Next and (Next.Time - Current.Time) or 0) / Class.Speed

					for limb, pose in pairs(Current.Poses) do
						local joint = Joints[limb]
						if joint then
							local finalC0 = AnimDefaults[limb] * pose.CFrame
							Edit(joint, finalC0, WaitTime, pose.EasingStyle, pose.EasingDirection)
						end
					end

					Class.KeyframeReached:Fire(Current.Name)

					local t = 0
					while t < WaitTime and not Class.Stopped and RigHumanoid.Health > 0 do
						t += task.wait()
					end
					if Class.Stopped or RigHumanoid.Health <= 0 then
						break
					end
				end

				if Class.Looped and not Class.Stopped and RigHumanoid.Health > 0 then
					Class.TimePosition = 0
				end
			until not Class.Looped or Class.Stopped or RigHumanoid.Health <= 0

			Class.IsPlaying = false
		end)
	end

	function Class:Stop()
		Class.Stopped = true
		Class.IsPlaying = false
	end

	function Class:AdjustSpeed(Speed)
		Class.Speed = math.clamp(math.abs(Speed or 1), 0.1, 60)
	end

	return Class
end

return AnimatorModule
